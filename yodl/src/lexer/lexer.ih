#include "lexer.h"

#include <stdio.h>
#include <ctype.h>

#include "../config.h"
#include "../args/args.h"
#include "../root/root.h"
#include "../new/new.h"
#include "../message/message.h"
#include "../file/file.h"
#include "../subst/subst.h"
#include "../media/media.h"

                            /* This capitalizes on the fact that EOF == -1  */
#define EOR                 (-2)

/*
    If the media struct stores a filename, d_memory is set to NULL
    If the media struct stores memory contents, d_memory is not NULL
    By inspecting the value of d_memory, it is determined whether we
    are processing a file or memory
*/

extern  char *l_token_name[];

    /*
        All _media_ functions may only be called when the Media * points
        to actual Media
    */
/**/void            l_media_construct_file(Media *mp, Lexer *,
                                                    char const *pahtname);
/**/void            l_media_construct_memory(Media *mp, Lexer *lp,
                                                    char const *str);
/**/void            l_media_destructor(void *mp);
/**/bool            l_media_fgetc(Media *mp);       /* true if char returned by */
                                                /* l_media_get() was read   */
                                                /* from file rather than    */
                                                /* its internal buffer      */
FILE           *l_media_file(Media *mp);
/**/char const     *l_media_filename(Media *mp);    /* returns filename         */
/**/int             l_media_get(Media *mp);         /* gets next char fm media  */
/**/bool            l_media_isFile(Media *mp);      /* true: media refers to a  */
                                                /* file, false: to memory   */
                                                /* or no media              */
/**/size_t          l_media_lineno(Media *mp);      /* 0 (no media) or linenr   */
/**/void            l_media_push_front(Media *mp, char const *str);
/**/void            l_media_restore_state(Media *mp);
/**/void            l_media_save_state(Media *mp);  /* info about current media */
                                                /* if it's a file, save its */
                                                /* info and close it        */

long            l_media_set_offset(Media *mp);  /* call only when mp refers */
                                                /* to a file. returnss and  */
                                                /* sets the d_offset field  */

                                                /* unget_memory() assumes   */
                                                /* enough room in d_memory  */
/**/void            l_media_unget_memory(Media *mp, int ch);


void            l_max_replacements_exceeded(size_t max);
LEXER_TOKEN     l_append(Lexer *lp, LEXER_TOKEN token);
LEXER_TOKEN     l_compound(Lexer *lp);
int             l_get(Lexer *lp);
void            l_getchar_message(Lexer *lp, char const *pushedback, int ch);
LEXER_TOKEN     l_handle_ident(Lexer *lp);
LEXER_TOKEN     l_handle_number(Lexer *lp);
bool            l_isIdentChar(Lexer *lp);       /* d_lastchar is identchar? */
LEXER_TOKEN     l_lex(Lexer *lp);
void            l_nextchar(Lexer *lp);
Result          l_pop(Lexer *lp);
void            l_push(Lexer *lp, char const *info,
                       void (*constructor)(Media *, Lexer *, char const *));
int             l_subst_get(Lexer *lp);
void            l_unget(Lexer *lp, int ch);
void            l_push_level(Lexer *lp, char const *txt);
